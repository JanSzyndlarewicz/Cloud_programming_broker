# Docker swarm stack configuration for a hotel management system
# docker stack rm hotel
# docker stack deploy -c docker-compose.yml hotel
# docker service ls
# docker service scale hotel_cleaning-service=5

services:
  # Us≈Çugi aplikacyjne
  booking-service:
    build:
      context: booking-service/booking-service
      dockerfile: Dockerfile
    image: booking-service:latest
    ports:
      - "8000:8000"
    env_file:
      - booking-service/booking-service/.env
    networks:
      - db_net
    healthcheck:
      test: ["CMD", "true"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 10s

  cleaning-service:
    build:
      context: cleaning-service/cleaning-service
      dockerfile: Dockerfile
    image: cleaning-service:latest
    ports:
      - "8001:8001"
    env_file:
      - cleaning-service/cleaning-service/.env
    networks:
      - db_net
    healthcheck:
      test: ["CMD", "true"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 10s

  dining-service:
    build:
      context: dining-service/dining-service
      dockerfile: Dockerfile
    image: dining-service:latest
    ports:
      - "8002:8002"
    env_file:
      - dining-service/dining-service/.env
    networks:
      - db_net
    healthcheck:
      test: ["CMD", "true"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      replicas: 4
      resources:
        limits:
          cpus: '0.75'
          memory: 768M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 10s

  accounting-service:
    build:
      context: accounting-service/accounting-service
      dockerfile: Dockerfile
    image: accounting-service:latest
    ports:
      - "8003:8003"
    env_file:
      - accounting-service/accounting-service/.env
    networks:
      - db_net
    healthcheck:
      test: ["CMD", "true"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 10s

  notification-service:
    build:
      context: notification-service/notification-service
      dockerfile: Dockerfile
    image: notification-service:latest
    ports:
      - "8004:8004"
    env_file:
      - notification-service/notification-service/.env
    networks:
      - db_net
    healthcheck:
      test: ["CMD", "true"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 10s

  # Bazy danych
  booking-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: booking_db
    ports:
      - "5433:5432"
    volumes:
      - booking_data:/var/lib/postgresql/data
    networks:
      - db_net
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any

  cleaning-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cleaning_db
    ports:
      - "5434:5432"
    volumes:
      - cleaning_data:/var/lib/postgresql/data
    networks:
      - db_net
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: any

  dining-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: dining_db
    ports:
      - "5435:5432"
    volumes:
      - dining_data:/var/lib/postgresql/data
    networks:
      - db_net
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: any

  accounting-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: accounting_db
    ports:
      - "5436:5432"
    volumes:
      - accounting_data:/var/lib/postgresql/data
    networks:
      - db_net
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: any

  notification-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: notification_db
    ports:
      - "5437:5432"
    volumes:
      - notification_data:/var/lib/postgresql/data
    networks:
      - db_net
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: any

volumes:
  booking_data:
  cleaning_data:
  dining_data:
  accounting_data:
  notification_data:

networks:
  db_net:
    driver: overlay
    attachable: true
